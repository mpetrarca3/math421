---
title: "Assignment 8"
format: html
editor: visual
---


***How to do it?***:

-   Open the Rmarkdown file of this assignment ([link](assignment8.Rmd)) in Rstudio.

-   Right under each **question**, insert a code chunk (you can use the hotkey `Ctrl + Alt + I` to add a code chunk) and code the solution for the question.

-   `Knit` the rmarkdown file (hotkey: `Ctrl + Alt + K`) to export an html.

-   Publish the html file to your Githiub Page.

***Submission***: Submit the link on Github of the assignment to Canvas


```{r setup, include=FALSE}
knitr::opts_chunk$set(message = FALSE)
```


------------------------------------------------------------------------

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:


```{r}
1 + 1
```


You can add options to executable code like this


```{r}
#| echo: false
2 * 2
```


The `echo: false` option disables the printing of code (only output is displayed).

\*\*\*How to do it?\*\*\*:

\- Open the Rmarkdown file of this assignment (\[link\](assignment8.Rmd)) in Rstudio.

\- Right under each \*\*question\*\*, insert a code chunk (you can use the hotkey \`Ctrl + Alt + I\` to add a code chunk) and code the solution for the question.

\- \`Knit\` the rmarkdown file (hotkey: \`Ctrl + Alt + K\`) to export an html.

\- Publish the html file to your Githiub Page.

\*\*\*Submission\*\*\*: Submit the link on Github of the assignment to Canvas


```{r}

knitr::opts_chunk$set(message = FALSE)

```


\-\-\-\-\-\--

1\. Install two packages \`gganimate\` and \`gifski\` then restart Rstudio. Using the \`Adult Census Income\` data, make an animation using \`geom_point\` and \`transition_states\`.


```{r}
#Importing libraries and data.

library(gganimate)
library(gifski)
library(dplyr)
library(tidyverse)

df <- read_csv('adult_census.csv')
names(df)
  


```

```{r}
#Plotting the hours per week for each observation by age.

df %>% 
  ggplot()+
  geom_point(aes(x=age, y = hours.per.week))+
  transition_states(age)
  
```


2\. Using the \`Adult Census Income\` data, make an animation using \`geom_bar\` and \`transition_states\`.


```{r}
#Filtering for select categories of education and then using ggplot's geom_bar function to plot the number of observations by each level of education.

df %>%
  filter(education == "Assoc-acdm"|
            education == "Assoc-voc"|
            education == "Bachelors" |
            education == "Doctorate"|
            education == "HS-grad"|
            education == "Masters"|
            education == "Some-college") %>% 
  ggplot()+
  geom_bar(aes(x=education))+
  transition_states(education)
  
```


3\. Use the WHO's dataset at \[this link\](https://covid19.who.int/WHO-COVID-19-global-data.csv). Make a top-10 bar race by months between countries on the number of deaths by Covid 19 in 2021.


```{r}
#Importing data and observing the first 6 rows of the dataframe.

df <- read_csv('https://covid19.who.int/WHO-COVID-19-global-data.csv')
head(df)
```

```{r}
#Importing libraries and filtering for the year 2021. The `month` column was created and the changes were saved to a new dataframe. The dataframe is then grouped by `month` and `Country`. The total deaths for each month by country was calculated using summarise and taking the sum of the new deaths.

library(lubridate)
library(knitr)
df2 <- df %>% 
  filter(year(Date_reported) == 2021)

df2$month <- month(df2$Date_reported)

df2 <- df2 %>%
  group_by(month,Country) %>%
  summarise(total_deaths = sum(New_deaths))
df2

```

```{r}
#Creating the variable rank and saving it to the dataframe with mutate. Filter was used to only list countries that are ranked in the top 10.

df2 <- df2 %>% 
  group_by(month) %>% 
  mutate(rank=rank(-total_deaths)) %>% 
  filter(rank <=10)
df2
```

```{r}
#Plotting the total deaths by country with ggplot's geom_bar function. The the argument `month` within the transition_states function allows the month to increase. The graph updates every time the month changes.

p1 <- df2 %>% 
  ggplot(aes(x=rank, y=total_deaths, group=Country, fill=Country, 
             label=Country)) + 
  geom_col()+
  geom_text(aes(y = total_deaths, label = Country), hjust = 1.4)+ 
  coord_flip(clip = "off", expand = FALSE) + 
  labs(title = 'Month: {closest_state}', x='', 
  y='Total Number of Deaths', fill='Country')+
  theme(plot.title = element_text(hjust = 1, size = 22),
          axis.ticks.y = element_blank(),
          axis.text.y  = element_blank()) + 
  transition_states(month)+
  ease_aes("cubic-in-out")
```

```{r}
animate(p1, nframes = 400)
```


4\. Make a bar race using a dataset of your own interest. You may use the dataset that we use in class (https://covidtracking.com/data/download/all-states-history.csv) but you should make a different bar racev from ones in the slides.


```{r}
#Importing data with read_csv and saving it to a dataframe. Source: https://www.kaggle.com/datasets/sujaykapadnis/tornados

df <- read_csv("tornados.csv")
df
```

```{r}
#Grouping the dataframe by year and state, the summarise function was used to compare the average magnitude by state in each year.

df2 <- df %>%
  group_by(yr,st) %>%
  summarise(avg_magnitude = mean(mag))
df2
```

```{r}
#Creating the variable `rank` and saving it as a column to the dataframe with mutate. The filter function was used to limit the dataframe to only the states with a top 10 magnitude.

df2 <- df2 %>% 
  group_by(yr) %>% 
  mutate(rank=rank(-avg_magnitude)) %>% 
  filter(rank <=10)
df2
```

```{r}
#Plotting the average magnitude of tornados by state. The the argument `yr` within the transition_states function allows the year to increase. The graph updates every time the year changes.

p2 <- df2 %>% 
  ggplot(aes(x=rank, y=avg_magnitude, group=st, fill=st, 
             label=st)) + 
  geom_col()+
  geom_text(aes(y = avg_magnitude, label = st), hjust = 1.4)+ 
  coord_flip(clip = "off", expand = FALSE) + 
  labs(title = 'Year: {closest_state}', x='', 
  y='avg_magnitude', fill='st')+
  theme(plot.title = element_text(hjust = 1, size = 22),
          axis.ticks.y = element_blank(),
          axis.text.y  = element_blank()) + 
  transition_states(yr)+
  ease_aes("cubic-in-out")
animate(p2, nframes = 400)
```

