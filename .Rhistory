df %>%
filter(No_of_Votes >= 273693 & No_of_Votes <= 374161 &
Released_Year ==2020) %>%
summarise(avg_meta_score = mean(Meta_score,na.rm=TRUE))
df %>%
filter(No_of_Votes >= 273693 & No_of_Votes <= 374161 &
Released_Year == '2020') %>%
summarise(avg_meta_score = mean(Meta_score,na.rm=TRUE))
df %>%
filter(No_of_Votes >= 273693 & No_of_Votes <= 374161 &
Released_Year = '2020') %>%
df %>%
filter(No_of_Votes >= 273693 & No_of_Votes <= 374161 &
Released_Year = 2020) %>%
summary(df$No_of_Votes)
df %>%
filter(No_of_Votes >= 273693 & No_of_Votes <= 374161 &
Released_Year == '2020') %>%
summarise(avg_meta_score = mean(Meta_score,na.rm=TRUE))
df %>%
filter(No_of_Votes >= 273693 & No_of_Votes <= 374161 &
Released_Year == '2020') %>%
df %>%
filter(No_of_Votes >= 273693 & No_of_Votes <= 374161 &
Released_Year == '2020')
df %>%
filter(No_of_Votes >= 273693 & No_of_Votes <= 374161 & Released_Year == '2020')
df %>%
filter(Released_Year == '2020')
df
df %>%
filter(Released_Year == '2020')
df %>%
filter(Released_Year == '2020') %>%
summary(No_of_Votes)
df %>%
filter(Released_Year == '2020') %>%
summary(df$No_of_Votes)
df %>%
filter(Released_Year == '2020') %>%
summary(No_of_Votes)
df2020 <- df %>% filter(Released_Year == '2020')
df2020
df2020 <- df %>% filter(Released_Year == '2020')
summary(df2020$No_of_Votes)
df2020 <- df %>% filter(Released_Year == '2020')
summary(df2020$No_of_Votes)
df2020 %>%
filter(No_of_Votes >= 84127 & No_of_Votes < 106083) %>%
summarise(avg_meta_score = mean(Meta_score,na.rm=TRUE))
df2020
df$Runtime %>%
str_remove('min')
df$Runtime <- df$Runtime %>%
str_remove('min')
df$Runtime <- df$Runtime %>%
str_remove('min')
names(df)
head(df)
df$Runtime <- df$Runtime %>%
str_remove('min')
df <- df %>%
mutate(Runtime = as.numeric(Runtime), na.rm = TRUE) %>%
head()
df$Runtime <- df$Runtime %>%
str_remove('min')
df <- df %>%
mutate(Runtime = as.numeric(Runtime), na.rm = TRUE) %>%
df$Runtime <- df$Runtime %>%
str_remove('min')
df <- df %>%
mutate(Runtime = as.numeric(Runtime), na.rm = TRUE)
df$Runtime <- df$Runtime %>%
str_remove('min')
df <- df %>%
mutate(Runtime = as.numeric(Runtime), na.rm = TRUE)
df
knitr::opts_chunk$set(message = FALSE)
library(tidyverse)
df <- read_csv('imdb_top_1000.csv')
names(df)
df %>%
group_by(Series_Title) %>%
summarise(Gross) %>%
arrange(-Gross) %>%
head()
df %>%
group_by(Series_Title) %>%
summarise(IMDB_Rating) %>%
arrange(IMDB_Rating) %>%
head()
df %>%
group_by(Released_Year) %>%
count(Released_Year) %>%
arrange(-n)
df %>%
filter(Released_Year == '2014') %>%
summarise(total_revenue = sum(Gross,na.rm=TRUE))
df %>%
summarise(avg_revenue = mean(Gross,na.rm=TRUE))
df %>%
group_by(Released_Year) %>%
summarise(avg_votes = mean(No_of_Votes,na.rm=TRUE))
df %>%
filter(IMDB_Rating>9) %>%
summarise(avg_votes = mean(No_of_Votes,na.rm=TRUE))
df2020 <- df %>% filter(Released_Year == '2020')
summary(df2020$No_of_Votes)
df2020 %>%
filter(No_of_Votes >= 84127 & No_of_Votes < 106083) %>%
summarise(avg_meta_score = mean(Meta_score,na.rm=TRUE))
#There is only one movie from 2020 that falls within the range of votes.
#Hence, the average Meta score only represents one movie.
df2020
df$Runtime <- df$Runtime %>%
str_remove('min')
df <- df %>%
mutate(Runtime = as.numeric(Runtime), na.rm = TRUE)
df
df$Runtime <- df$Runtime %>%
str_remove('min')
df <- df %>%
mutate(Runtime = as.numeric(Runtime,na.rm = TRUE))
df
df <- df %>%
select(-na.rm)
df$Runtime <- df$Runtime %>%
str_remove('min')
df <- df %>%
mutate(Runtime = as.numeric(Runtime,na.rm = TRUE))
df
df <- df %>%
select(-na.rm)
df$Runtime <- df$Runtime %>%
str_remove('min')
df <- df %>%
mutate(Runtime = as.numeric(Runtime,na.rm = TRUE))
df
df$Runtime <- df$Runtime %>%
str_remove('min')
df <- df %>%
mutate(Runtime = as.numeric(Runtime,na.rm = TRUE))
df
df$Runtime <- df$Runtime %>%
str_remove('min')
df <- df %>%
mutate(Runtime = as.numeric(Runtime,na.rm = TRUE))
head(df)
df %>%
filter(Released_Year >=2010 & Released_Year <=2019) %>%
summarise(avg_run_time_2010s = mean(Runtime))
df %>%
filter(Released_Year >=2010 & Released_Year <=2019) %>%
summarise(avg_run_time_2010s = mean(Runtime))
mean(df$Runtime)
df %>%
filter(Released_Year >=2010 & Released_Year <=2019) %>%
summarise(avg_run_time_2010s = mean(Runtime))
df %>%
filter(Released_Year >=2010 & Released_Year <=2019) %>%
summarise(avg_run_time_2010s = mean(Runtime, na.rm = TRUE))
df %>%
cor(Runtime,IMDB_Rating, use = 'complete.obs')
df %>%
cor(IMDB_Rating,Runtime, use = 'complete.obs')
df %>%
cor(IMDB_Rating,Runtime)
df %>%
cor(IMDB_Rating,Runtime, use = "complete.obs")
df %>%
cor('IMDB_Rating','Runtime', use = "complete.obs")
df %>%
cor(IMDB_Rating,Runtime, use = "complete.obs")
df %>%
cor(Runtime, use = "complete.obs")
df %>%
cor(IMDB_Rating, use = "complete.obs")
knitr::opts_chunk$set(message = FALSE)
library(tidyverse)
df <- read_csv('imdb_top_1000.csv')
names(df)
df %>%
group_by(Series_Title) %>%
summarise(Gross) %>%
arrange(-Gross) %>%
head()
df %>%
group_by(Series_Title) %>%
summarise(IMDB_Rating) %>%
arrange(IMDB_Rating) %>%
head()
df %>%
group_by(Released_Year) %>%
count(Released_Year) %>%
arrange(-n)
df %>%
filter(Released_Year == '2014') %>%
summarise(total_revenue = sum(Gross,na.rm=TRUE))
df %>%
summarise(avg_revenue = mean(Gross,na.rm=TRUE))
df %>%
group_by(Released_Year) %>%
summarise(avg_votes = mean(No_of_Votes,na.rm=TRUE))
df %>%
filter(IMDB_Rating>9) %>%
summarise(avg_votes = mean(No_of_Votes,na.rm=TRUE))
df2020 <- df %>% filter(Released_Year == '2020')
summary(df2020$No_of_Votes)
df2020 %>%
filter(No_of_Votes >= 84127 & No_of_Votes < 106083) %>%
summarise(avg_meta_score = mean(Meta_score,na.rm=TRUE))
#There is only one movie from 2020 that falls within the range of votes.
#Hence, the average Meta score only represents one movie.
df2020
df$Runtime <- df$Runtime %>%
str_remove('min')
df <- df %>%
mutate(Runtime = as.numeric(Runtime,na.rm = TRUE))
head(df)
df %>%
filter(Released_Year >=2010 & Released_Year <=2019) %>%
summarise(avg_run_time_2010s = mean(Runtime, na.rm = TRUE))
df %>%
cor(IMDB_Rating, use = "complete.obs")
cor(df$Runtime)
cor(df$Runtime, df$IMDB_Rating, use = "complete.obs")
# Select only character columns
df %>% select_if(is.character)
# Calculate the median of all numeric columns
df %>% summarise_if(is.numeric, mean, na.rm=TRUE)
# Select only character columns
df %>% select_if(is.character)
# Calculate the median of all numeric columns
df %>% summarise_if(is.numeric, mean, na.rm=TRUE)
knitr::opts_chunk$set(message = FALSE)
table(is.na(df))
colSums(is.na(df))
df %>% mutate(Age = 2023 - Released_Year)
knitr::opts_chunk$set(message = FALSE)
library(tidyverse)
df <- read_csv('imdb_top_1000.csv')
names(df)
df %>%
group_by(Series_Title) %>%
summarise(Gross) %>%
arrange(-Gross) %>%
head()
df %>%
group_by(Series_Title) %>%
summarise(IMDB_Rating) %>%
arrange(IMDB_Rating) %>%
head()
df %>%
group_by(Released_Year) %>%
count(Released_Year) %>%
arrange(-n)
df %>%
filter(Released_Year == '2014') %>%
summarise(total_revenue = sum(Gross,na.rm=TRUE))
df %>%
summarise(avg_revenue = mean(Gross,na.rm=TRUE))
df %>%
group_by(Released_Year) %>%
summarise(avg_votes = mean(No_of_Votes,na.rm=TRUE))
df %>%
filter(IMDB_Rating>9) %>%
summarise(avg_votes = mean(No_of_Votes,na.rm=TRUE))
df2020 <- df %>% filter(Released_Year == '2020')
summary(df2020$No_of_Votes)
#There is only one movie from 2020 that falls within the range of votes.
#Hence, the average Meta score only represents one movie.
df2020 %>%
filter(No_of_Votes >= 84127 & No_of_Votes < 106083) %>%
summarise(avg_meta_score = mean(Meta_score,na.rm=TRUE))
df2020
df$Runtime <- df$Runtime %>%
str_remove('min')
df <- df %>%
mutate(Runtime = as.numeric(Runtime,na.rm = TRUE))
head(df)
df %>%
filter(Released_Year >=2010 & Released_Year <=2019) %>%
summarise(avg_run_time_2010s = mean(Runtime, na.rm = TRUE))
cor(df$Runtime, df$IMDB_Rating, use = "complete.obs")
#Removing non-useful columns from the dataframe.
df <- df %>% select(-Poster_Link, -Certificate, -Overview)
names(df)
#Filtering movies by the big category "Action, Crime, Drama"
df %>% filter(Genre == "Action, Crime, Drama")
df %>% mutate(Age = 2023 - Released_Year)
df %>% mutate(Adjusted_Avg_Score = IMDB_Rating - Meta_score/100)
df %>% mutate(Adjusted_Avg_Score = 0.5*(IMDB_Rating + Meta_score/100))
df %>% mutate(Adjusted_Avg_Score = 0.5*(IMDB_Rating + Meta_score/100))
#Creating a variable that scales the metascore to the IMDB rating. The variable represents the average of the two.
df1 <- df %>% mutate(Adjusted_Avg_Score = 0.5*(IMDB_Rating + Meta_score/100))
summarise(df)
summarise(df1$Adjusted_Avg_Score)
summarise(df1$Star1)
df1 %>% summarise(IMDB_rating)
#Creating a variable that scales the metascore to the IMDB rating. The variable represents the average of the two.
df1 <- df %>% mutate(Adjusted_Avg_Score = 0.5*(IMDB_Rating + Meta_score/100))
df1 %>% summarise(IMDB_rating)
df1 %>% summarise(IMDB_rating, na.rm = TRUE)
df1 %>% summarise(Adjusted_Avg_Score, na.rm = TRUE)
df1 %>% summarise(Adjusted_Avg_Score, Runtime)
df1 %>% summarise(Series_Title, Adjusted_Avg_Score)
df1
#Creating a variable that scales the metascore to the IMDB rating. The variable represents the average of the two.
df1 <- df %>% mutate(Adjusted_Avg_Score = 0.5*(IMDB_Rating + (Meta_score/100))
df1
#Creating a variable that scales the metascore to the IMDB rating. The variable represents the average of the two.
df1 <- df %>% mutate(Adjusted_Avg_Score = 0.5*(IMDB_Rating + (Meta_score/100)))
df1
#Creating a variable that scales the metascore to the IMDB rating. The variable represents the average of the two.
df1 <- df %>% mutate(Adjusted_Avg_Score = (10*IMDB_Rating + Meta_score)/10)
df1
#Creating a variable that scales the metascore to the IMDB rating. The variable represents the average of the two.
df1 <- df %>% mutate(Adjusted_Avg_Score = (10*IMDB_Rating + Meta_score)/2)
df1
df1 %>% summarise(Series_Title, Adjusted_Avg_Score)
df1 %>% summarise(Series_Title, max_adjusted_score = max(Adjusted_Avg_Score, na.rm = TRUE) )
df1 %>% summarise(average Adjusted_Avg_Score, No_of_Votes )
df1 %>% summarise(Adjusted_Avg_Score, No_of_Votes )
df1 %>% summarise(Series_Title,Adjusted_Avg_Score, No_of_Votes )
df1 %>% summarise(Series_Title,Adjusted_Avg_Score, avg_votes = mean(No_of_Votes, na.rm = TRUE) )
df1 %>% summarise(Star1, avg_votes = mean(No_of_Votes, na.rm = TRUE) )
df1 %>% summarise(Star1, number_of_movies = max(Series_Title, na.rm = TRUE))
df1 %>% summarise(Star1, number_of_movies = which.max(Series_Title, na.rm = TRUE))
df1 %>% summarise(Star1, number_of_movies = which.max(table(Series_Title, na.rm = TRUE)))
df1 %>% summarise(Star1, number_of_movies = which.max(table(Star1, na.rm = TRUE)))
df1 %>% summarise(Genre, Adjusted_Avg_Score)
df1 %>% summarise(Director == 'Francis Ford Coppola', Meta_score )
#Creating a variable that scales IMDB rating to Meta Score. This variable represents the average of the two.
df1 <- df %>% mutate(Adjusted_Avg_Score = (10*IMDB_Rating + Meta_score)/2)
df1
df1 %>% summarise(Series_Title, max_adjusted_score = max(Adjusted_Avg_Score, na.rm = TRUE))
df1 %>% summarise(max_adjusted_score = max(Adjusted_Avg_Score, na.rm = TRUE))
df1 %>% summarise(min_adjusted_score = min(Adjusted_Avg_Score, na.rm = TRUE),
max_adjusted_score = max(Adjusted_Avg_Score, na.rm = TRUE))
df1 %>% summarise(min_adjusted_score = min(Adjusted_Avg_Score, na.rm = TRUE),
mean_adjusted_score = mean(Adjusted_Avg_Score, na.rm = TRUE),
max_adjusted_score = max(Adjusted_Avg_Score, na.rm = TRUE))
#Using summarise to find the min, mean, and max adjusted average score.
df1 %>% summarise(min_adjusted_score = min(Adjusted_Avg_Score, na.rm = TRUE),
mean_adjusted_score = mean(Adjusted_Avg_Score, na.rm = TRUE),
max_adjusted_score = max(Adjusted_Avg_Score, na.rm = TRUE))
df1 %>% arrange(Adjusted_Avg_Score)
df1 %>% arrange(-Adjusted_Avg_Score)
df1 %>% count(Director == 'Alfred Hitchcock')
df1 %>% count(Director = 'Alfred Hitchcock')
df1 %>% countif(Director == 'Alfred Hitchcock')
df1 %>% count(Movies, Director == 'Alfred Hitchcock')
df1 %>% count(Director == 'Alfred Hitchcock')
df1 %>% count(Director, Director == 'Alfred Hitchcock')
df1 %>% count(Director
)
df1 %>% count(Director)
#Using count to find the number of movies by each director.
df1 %>% count(-Director)
#Using count to find the number of movies by each director.
df1 %>% count(Director)
df1 %>% count(Director, sort = TRUE)
#Using count + arrange to find the stars with the most lead roles in movies.
df1 %>% count(Star1,Star2)
#Using count + arrange to find the stars with the most lead roles in movies.
df1 %>% count(Star1,Star2,Star3,Star4) %>%
arrange(-n)
#Using count + arrange to find the stars with the most lead roles in movies.
df1 %>% count(Star1) %>%
arrange(-n)
#Using count + arrange to find the stars with the most lead roles in movies.
df1 %>% count(Star1) %>%
arrange(-n)
#Using count + arrange to find the stars with the most lead roles in movies.
df1 %>% count(Star1 & Star2) %>%
arrange(-n)
#Using count + arrange to find the stars with the most lead roles in movies.
df1 %>% count(Star1, Star2) %>%
arrange(-n)
#Using count + arrange to find the stars with the most lead roles in movies.
df1 %>% count(Star1) %>%
arrange(-n)
#Using count + arrange to find the stars with the most lead roles in movies.
df1 %>% count(Star1, Star2, .by_group = TRUE) %>%
arrange(-n)
#Using count + arrange to find the stars with the most lead roles in movies.
df1 %>% count(Star1, Star2) %>%
arrange(-n,.by_group = TRUE)
#Using count + arrange to find the stars with the most lead roles in movies.
df1 %>% count(Star1, Star2) %>%
arrange(-n)
#Using count + arrange to find the stars with the most lead roles in movies.
df1 %>% count(Runtime) %>%
arrange(-n)
#Using count + arrange to find the stars with the most lead roles in movies.
df1 %>% count(Director, Runtime) %>%
arrange(-n)
#Using count + arrange to find the stars with the most lead roles in movies.
df1 %>% count(Director) %>%
arrange(Runtime)
#Using count + arrange to find the stars with the most lead roles in movies.
df1 %>% count(Director) %>%
arrange(-n)
#Using count + arrange to find the stars with the most lead roles in movies.
df1 %>% count(Star1) %>%
arrange(-n)
df1 %>% filter(Adjusted_Avg_Score < 7.0) %>%
count(Director) %>%
arrange(-n)
df1 %>% filter(Adjusted_Avg_Score > 7.0) %>%
count(Director) %>%
arrange(-n)
df1 %>% filter(Adjusted_Avg_Score > 9.0) %>%
count(Director) %>%
arrange(-n)
#Using filter + count + arrange to find the
df1 %>% filter(Director == "Alfred Hitchcock") %>%
count(Genre) %>%
arrange(-n)
df1 %>% group_by(Genre) %>%
summarise(mean_adj_score = mean(Adjusted_Avg_Score, na.rm = TRUE))
df1 %>% group_by(Genre) %>%
summarise(mean_adj_score = mean(Adjusted_Avg_Score, na.rm = TRUE), sort = TRUE)
df1 %>% group_by(Genre) %>%
summarise(mean_adj_score = mean(Adjusted_Avg_Score, na.rm = TRUE))
#Using filter + group_by + summarise to
df1 %>% filter(Released_Year > 1999) %>%
group_by(Genre) %>%
summarise(Gross)
#Using filter + group_by + summarise to
df1 %>% filter(Released_Year > 1999) %>%
group_by(Genre) %>%
summarise(Gross = mean(Gross))
#Using filter + group_by + summarise to
df1 %>% filter(Released_Year > 1999) %>%
group_by(Genre) %>%
summarise(Gross = mean(Gross, na.rm = TRUE))
#Using filter + group_by + summarise to find the
df1 %>% filter(Released_Year > 1999) %>%
group_by(Genre) %>%
summarise(average_Gross = mean(Gross, na.rm = TRUE))
#Using filter + group_by + summarise to find the the average
df1 %>% filter(Released_Year > 1999) %>%
group_by(Genre) %>%
summarise(average_Gross = mean(Gross, na.rm = TRUE))
#Using filter + group_by + summarise to find the the average sales by genre since 1999
df1 %>% filter(Released_Year > 1999) %>%
group_by(Genre) %>%
summarise(total_Sales = sum(Gross, na.rm = TRUE))
#Using filter + group_by + summarise + arrange to find
df1 %>% filter(Released_Year < 2000) %>%
group_by(Director) %>%
summarise(total_votes = sum(No_of_Votes, na.rm = TRUE)) %>%
arrange(-n)
#Using filter + group_by + summarise + arrange to find
df1 %>% filter(Released_Year < 2000) %>%
group_by(Director) %>%
summarise(total_votes = sum(No_of_Votes, na.rm = TRUE))
#Using filter + group_by + summarise + arrange to find
df1 %>% filter(Released_Year < 2000) %>%
group_by(Director) %>%
summarise(total_votes = sum(No_of_Votes, na.rm = TRUE)) %>%
arrange(-total_votes)
mean(1.2,2.1,3.0,1.6)
mean(1.2,2.1,3,1.6)
mean(1.2,2.1,3,1.6,1.5)
1.2+2.1+3+1.6+1.5
9.4/4
9.4-5
9.4/5
mean(1.2,1.5,2,1.6)
mean(1.2,2.1,1.5,2,1.6)
mean(1.2,2.1,1.5,2,1.6)
1.2+2.1+1.5+2+1.6
/5
8.4/5
9.4/5
(1.2+2.1+1.5+2.0+1.6)/5
knitr::opts_chunk$set(message = FALSE)
1 + 1
#| echo: false
2 * 2
knitr::opts_chunk$set(message = FALSE)
library(gganimate)
library(gifski)
library(dplyr)
library(tidyverse)
df <- read_csv('adult_census.csv')
names(df)
df %>%
ggplot()+
geom_point(aes(x=age, y = hours.per.week))+
transition_states(age)
df %>%
ggplot()+
geom_bar(aes(x=education))+
transition_states(education)
df <- read_csv('https://covid19.who.int/WHO-COVID-19-global-data.csv')
head(df)
library(lubridate)
library(knitr)
df2 <- df %>%
filter(year(Date_reported) == 2021)
df2$month <- month(df2$Date_reported)
df2 <- df2 %>%
group_by(month,Country) %>%
summarise(total_deaths = sum(New_deaths))
df2
p1 <- df2 %>%
group_by(month) %>%
mutate(rank=rank(-total_deaths))
table(p1)
