summarise(mean(positiveIncrease))
#Median number of cases by 'month'
df %>%
group_by(month) %>%
summarise(median(positiveIncrease))
#Average number of cases by 'month2'
df %>%
group_by(month2) %>%
summarise(mean(positiveIncrease))
#Median number of cases by 'weekend'
df %>%
group_by(weekend) %>%
summarise(median(positiveIncrease))
df %>%
filter(month==1|month==2) %>%
group_by(month) %>%
summarise(positve_increase = mean(positiveIncrease))
df %>%
filter(month==10|month==11,year(date)==2020) %>%
group_by(weekend) %>%
summarise(positve_increase = median(positiveIncrease))
df %>%
filter(year(date) == 2020 & ((month == 9 & monthday >21) | month == 10 |
month == 11 | (month == 12 & monthday <= 20))) %>%
group_by(month2) %>%
summarise(mean_death = mean(death, na.rm = TRUE))
df %>%
filter(year(date) == 2020 & ((month == 6 & monthday > 19) | month == 7 |
month == 8 |(month == 9 & monthday <21))) %>%
group_by(weekend) %>%
summarise(mean_hospitalized = mean(hospitalized, na.rm = TRUE))
df %>%
filter(state == 'RI' & year(date) == 2021) %>%
group_by(weekday) %>%
summarise(mean_cases = mean(positiveIncrease, na.rm = TRUE))
df %>%
filter(state == 'RI' & year(date)==2021 & month == 6 | month == 7 | month == 8 | month == 9) %>%
group_by(month) %>%
summarise(median_cases = median(positiveIncrease, na.rm = TRUE))
df %>% filter(weekend == 1) %>%
group_by(month) %>%
summarise(deaths_by_weekend = sum(death, na.rm = TRUE)) %>%
arrange(-deaths_by_weekend)
universityDf <- read_csv('World University Rankings 2023.csv')
universityDf
#Removing the column 'No of student per staff' from the dataframe.
universityDf <- universityDf %>% select(-'No of student per staff')
universityDf
universityDf %>% filter(Location == 'United States')
#Converting the class of variables in the dataframe from character to numeric with mutate.
universityDf <- universityDf %>% mutate(`OverAll Score`=as.numeric(`OverAll Score`),
`Teaching Score`=as.numeric(`Teaching Score`),
`Research Score`=as.numeric(`Research Score`),
`Citations Score`=as.numeric(`Citations Score`),
`Industry Income Score`=as.numeric(`Industry Income Score`),
`International Outlook Score`=as.numeric(`International Outlook Score`), na.rm =TRUE)
universityDf
universityDf %>% summarise(min_number_of_students = min(.[[4]], na.rm = TRUE),
avg_number_of_students = mean(.[[4]], na.rm = TRUE),
max_number_of_students = max(.[[4]], na.rm = TRUE))
#Using subset to find the schools with the minimum and maximum number of students.
universityDf %>% subset(.[[4]] == 115 |
.[[4]] == 460632)
#Using the arrange function to find the universities with the most students.
universityDf %>% arrange(-.[[4]])
#Using count to find the number of universities in each country.
universityDf %>% count(Location)
#Using the count + arrange combo to find the locations with the highest number of universities.
universityDf %>% count(Location) %>%
arrange(-n)
#Filter + count + arrange combo: Comparing the number of top small universities (less than 5,000 students)
#between the U.S. and U.K.
universityDf %>% filter(.[[4]]< 5000 & (Location == 'United States'|Location =='United Kingdom')) %>%
count(Location) %>%
arrange(-n)
#group_by + summarise
universityDf %>%
group_by(Location) %>%
summarise(mean_ovr_score = mean(`OverAll Score`,na.rm=TRUE))
#Using the filter + group_by + summarise combo to compare the average overall score between the U.S. and the U.K.
universityDf %>%
filter(Location == 'United States'|Location == 'United Kingdom') %>%
group_by(Location) %>%
summarise(mean_ovr_score = mean(`OverAll Score`,na.rm=TRUE))
knitr::opts_chunk$set(message = FALSE)
install.packages('tidyr')
install.packages("tidyr")
library(tidyr)
library(tidyverse)
df <- read_csv('https://covidtracking.com/data/download/all-states-history.csv')
knitr::opts_chunk$set(message = FALSE)
library(lubridate)
df$month = month(df$date)
# day of the week
df$weekday = wday(df$date)
# day of the month
df$monthday <- mday(df$date)
head(df)
df$daily_death <- case_when(
df$deathIncrease <3 ~ 'low',
df$deathIncrease <=14 ~ 'medium',
TRUE ~ 'high'
)
head(df)
df$month2 <- case_when(
df$monthday <11 ~ 'early_month',
df$monthday <=20 ~ 'mid_month',
TRUE ~ 'end_month'
)
head(df)
df$weekend <- case_when(
df$weekday <2 ~ 1,
df$weekday <=6 ~ 0,
TRUE ~ 1
)
head(df)
#Deselecting totalTestsViral with the select function.
#The deselection was assigned to the dataframe.
df <- df %>% select(-totalTestsViral)
df
x <- c(1:10)
# square root of x
sqrt(x)
sum(sqrt(x))
log(sum(sqrt(x)))
# log base 2 of 16
log(16, 2)
x %>% sqrt
x %>% sqrt %>% sum
x %>% sqrt %>% sum %>% log
16 %>% log2
df %>%
group_by(weekday) %>%
summarise(mean(positiveIncrease))
#Median number of cases by 'month'
df %>%
group_by(month) %>%
summarise(median(positiveIncrease))
#Average number of cases by 'month2'
df %>%
group_by(month2) %>%
summarise(mean(positiveIncrease))
#Median number of cases by 'weekend'
df %>%
group_by(weekend) %>%
summarise(median(positiveIncrease))
df %>%
filter(month==1|month==2) %>%
group_by(month) %>%
summarise(positve_increase = mean(positiveIncrease))
df %>%
filter(month==10|month==11,year(date)==2020) %>%
group_by(weekend) %>%
summarise(positve_increase = median(positiveIncrease))
df %>%
filter(year(date) == 2020 & ((month == 9 & monthday >21) | month == 10 |
month == 11 | (month == 12 & monthday <= 20))) %>%
group_by(month2) %>%
summarise(mean_death = mean(death, na.rm = TRUE))
df %>%
filter(year(date) == 2020 & ((month == 6 & monthday > 19) | month == 7 |
month == 8 |(month == 9 & monthday <21))) %>%
group_by(weekend) %>%
summarise(mean_hospitalized = mean(hospitalized, na.rm = TRUE))
df %>%
filter(state == 'RI' & year(date) == 2021) %>%
group_by(weekday) %>%
summarise(mean_cases = mean(positiveIncrease, na.rm = TRUE))
df %>%
filter(state == 'RI' & year(date)==2021 & month == 6 | month == 7 | month == 8 | month == 9) %>%
group_by(month) %>%
summarise(median_cases = median(positiveIncrease, na.rm = TRUE))
df %>% filter(weekend == 1) %>%
group_by(month) %>%
summarise(deaths_by_weekend = sum(death, na.rm = TRUE)) %>%
arrange(-deaths_by_weekend)
universityDf <- read_csv('World University Rankings 2023.csv')
universityDf
#Removing the column 'No of student per staff' from the dataframe.
universityDf <- universityDf %>% select(-'No of student per staff')
universityDf
universityDf %>% filter(Location == 'United States')
#Converting the class of variables in the dataframe from character to numeric with mutate.
universityDf <- universityDf %>% mutate(`OverAll Score`=as.numeric(`OverAll Score`),
`Teaching Score`=as.numeric(`Teaching Score`),
`Research Score`=as.numeric(`Research Score`),
`Citations Score`=as.numeric(`Citations Score`),
`Industry Income Score`=as.numeric(`Industry Income Score`),
`International Outlook Score`=as.numeric(`International Outlook Score`), na.rm =TRUE)
#Converting the class of variables in the dataframe from character to numeric with mutate.
universityDf <- universityDf %>% mutate(`OverAll Score`=as.numeric(`OverAll Score`),
`Teaching Score`=as.numeric(`Teaching Score`),
`Research Score`=as.numeric(`Research Score`),
`Citations Score`=as.numeric(`Citations Score`),
`Industry Income Score`=as.numeric(`Industry Income Score`),
`International Outlook Score`=as.numeric(`International Outlook Score`), na.rm =TRUE)
universityDf %>% summarise(min_number_of_students = min(.[[4]], na.rm = TRUE),
avg_number_of_students = mean(.[[4]], na.rm = TRUE),
max_number_of_students = max(.[[4]], na.rm = TRUE))
#Using subset to find the schools with the minimum and maximum number of students.
universityDf %>% subset(.[[4]] == 115 |
.[[4]] == 460632)
#Using the arrange function to find the universities with the most students.
universityDf %>% arrange(-.[[4]])
#Using count to find the number of universities in each country.
universityDf %>% count(Location)
#Using the count + arrange combo to find the locations with the highest number of universities.
universityDf %>% count(Location) %>%
arrange(-n)
#Filter + count + arrange combo: Comparing the number of top small universities (less than 5,000 students)
#between the U.S. and U.K.
universityDf %>% filter(.[[4]]< 5000 & (Location == 'United States'|Location =='United Kingdom')) %>%
count(Location) %>%
arrange(-n)
#group_by + summarise
universityDf %>%
group_by(Location) %>%
summarise(mean_ovr_score = mean(`OverAll Score`,na.rm=TRUE))
#Using the filter + group_by + summarise combo to compare the average overall score between the U.S. and the U.K.
universityDf %>%
filter(Location == 'United States'|Location == 'United Kingdom') %>%
group_by(Location) %>%
summarise(mean_ovr_score = mean(`OverAll Score`,na.rm=TRUE))
#Using the filter + group_by + summarise + arrange combo to find the countries with the highest mean over all score
# among the world's best universities.
universityDf %>%
filter(.[[4]] >= 5000 & .[[4]] <= 15000) %>%
group_by(Location) %>%
summarise(mean_ovr_score = mean(`OverAll Score`,na.rm=TRUE)) %>%
arrange(-mean_ovr_score, na.rm = TRUE)
install.packages('tidyr')
install.packages('tidyr')
knitr::opts_chunk$set(message = FALSE)
install.packages('tidyr')
install.packages('tidyr')
install.packages('tidyverse')
install.packages('tidyr')
install.packages('tidyverse')
install.packages('tidyr')
install.packages('tidyverse')
install.packages('tidyr')
install.packages('tidyverse')
install.packages('tidyr')
install.packages('tidyverse')
install.packages('tidyr')
install.packages('tidyverse')
install.packages('tidyr')
install.packages('tidyverse')
knitr::opts_chunk$set(message = FALSE)
install.packages('tidyr')
install.packages('tidyverse')
install.packages('tidyr')
install.packages('tidyverse')
library(tidyr)
library(tidyverse)
df <- read_csv('https://covidtracking.com/data/download/all-states-history.csv')
library(lubridate)
df$month = month(df$date)
# day of the week
df$weekday = wday(df$date)
# day of the month
df$monthday <- mday(df$date)
head(df)
install.packages('tidyr')
install.packages('tidyverse')
install.packages("tidyr")
knitr::opts_chunk$set(message = FALSE)
install.packages('tidyr')
install.packages('tidyverse')
install.packages('tidyr')
library(tidyr)
library(tidyverse)
df <- read_csv('https://covidtracking.com/data/download/all-states-history.csv')
install.packages('tidyr')
install.packages('Rtools')
knitr::opts_chunk$set(message = FALSE)
install.packages('tidyr')
install.packages('tidyverse')
install.packages('Rtools')
install.packages('tidyr')
library(tidyr)
library(tidyverse)
df <- read_csv('https://covidtracking.com/data/download/all-states-history.csv')
library(lubridate)
df$month = month(df$date)
# day of the week
df$weekday = wday(df$date)
# day of the month
df$monthday <- mday(df$date)
head(df)
df$daily_death <- case_when(
df$deathIncrease <3 ~ 'low',
df$deathIncrease <=14 ~ 'medium',
TRUE ~ 'high'
)
head(df)
df$month2 <- case_when(
df$monthday <11 ~ 'early_month',
df$monthday <=20 ~ 'mid_month',
TRUE ~ 'end_month'
)
head(df)
install.packages('tidyr')
install.packages("tidyr")
install.packages('tidyr')
knitr::opts_chunk$set(message = FALSE)
install.packages('tidyr')
install.packages('Rtools')
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(message = FALSE)
install.packages('tidyr')
library(tidyverse)
library(tidyverse)
df <- read_csv(https://bryantstats.github.io/math421/data/adult_census_missing.csv)
library(tidyverse)
df <- read_csv('https://bryantstats.github.io/math421/data/adult_census_missing.csv')
head(df)
is.na(df)
sum(is.na(df))
sum(sum(is.na(df)))
sum(is.na(is.na(df)))
sum(is.na(df))
colSums(is.na(df))
colSums(is.na(df))
sum(is.na(df))
aggr(df)
install.packages('VIM')
aggr(df)
remove.packages('VIM')
install.packages('VIM')
library('VIM')
aggr(df)
names(df)
table(df)
table(df[:1000])
table(df[1000])
table([1000]df)
table(df$age)
df
head(df)
table(df$age, df$workclass)
table(df$workclass)
table(df$age)
table(df$workclass)
df$workclass <- na_if(df$workclass == ('?'|'Not known'))
df$workclass <- na_if(df$workclass, '?')
df$workclass <- na_if(df$workclass, '?'|'Not known'|'Unknown')
df$workclass <- na_if(df$workclass, ('?'|'Not known'|'Unknown'))
df$workclass <- na_if(df$workclass,'?')
df$workclass <- na_if(df$workclass,'?','Unknown')
df1 <- df %>%
replace('Unknown','Not known','?', NA)
df1 <- df$workclass %>%
replace('Unknown','Not known','?', NA)
df1 <- df$workclass %>%
replace('Unknown'|'Not known'|'?', NA)
df1 <- df %>%
replace_na('?',NA)
df1 <- df %>%
replace(c['?','Unknown'], NA)
df1 <- df %>%
replace(['?','Unknown'], NA)
df1 <- df %>%
replace(('?','Unknown'), NA)
df1 <- df %>%
replace('?','Unknown', NA)
df1 <- df %>%
replace('?','Unknown', NA)
knitr::opts_chunk$set(message = FALSE)
install.packages('tidyr')
library(tidyr)
library(tidyverse)
df <- read_csv('https://covidtracking.com/data/download/all-states-history.csv')
library(lubridate)
df$month = month(df$date)
# day of the week
df$weekday = wday(df$date)
# day of the month
df$monthday <- mday(df$date)
head(df)
df$daily_death <- case_when(
df$deathIncrease <3 ~ 'low',
df$deathIncrease <=14 ~ 'medium',
TRUE ~ 'high'
)
head(df)
df$month2 <- case_when(
df$monthday <11 ~ 'early_month',
df$monthday <=20 ~ 'mid_month',
TRUE ~ 'end_month'
)
head(df)
df$weekend <- case_when(
df$weekday <2 ~ 1,
df$weekday <=6 ~ 0,
TRUE ~ 1
)
head(df)
#Deselecting totalTestsViral with the select function.
#The deselection was assigned to the dataframe.
df <- df %>% select(-totalTestsViral)
df
x <- c(1:10)
# square root of x
sqrt(x)
sum(sqrt(x))
log(sum(sqrt(x)))
# log base 2 of 16
log(16, 2)
x %>% sqrt
x %>% sqrt %>% sum
x %>% sqrt %>% sum %>% log
16 %>% log2
df %>%
group_by(weekday) %>%
summarise(mean(positiveIncrease))
#Median number of cases by 'month'
df %>%
group_by(month) %>%
summarise(median(positiveIncrease))
#Average number of cases by 'month2'
df %>%
group_by(month2) %>%
summarise(mean(positiveIncrease))
#Median number of cases by 'weekend'
df %>%
group_by(weekend) %>%
summarise(median(positiveIncrease))
df %>%
filter(month==1|month==2) %>%
group_by(month) %>%
summarise(positve_increase = mean(positiveIncrease))
df %>%
filter(month==10|month==11,year(date)==2020) %>%
group_by(weekend) %>%
summarise(positve_increase = median(positiveIncrease))
df %>%
filter(year(date) == 2020 & ((month == 9 & monthday >21) | month == 10 |
month == 11 | (month == 12 & monthday <= 20))) %>%
group_by(month2) %>%
summarise(mean_death = mean(death, na.rm = TRUE))
df %>%
filter(year(date) == 2020 & ((month == 6 & monthday > 19) | month == 7 |
month == 8 |(month == 9 & monthday <21))) %>%
group_by(weekend) %>%
summarise(mean_hospitalized = mean(hospitalized, na.rm = TRUE))
df %>%
filter(state == 'RI' & year(date) == 2021) %>%
group_by(weekday) %>%
summarise(mean_cases = mean(positiveIncrease, na.rm = TRUE))
df %>%
filter(state == 'RI' & year(date)==2021 & month == 6 | month == 7 | month == 8 | month == 9) %>%
group_by(month) %>%
summarise(median_cases = median(positiveIncrease, na.rm = TRUE))
df %>% filter(weekend == 1) %>%
group_by(month) %>%
summarise(deaths_by_weekend = sum(death, na.rm = TRUE)) %>%
arrange(-deaths_by_weekend)
universityDf <- read_csv('World University Rankings 2023.csv')
universityDf
#Removing the column 'No of student per staff' from the dataframe.
universityDf <- universityDf %>% select(-'No of student per staff')
universityDf
universityDf %>% filter(Location == 'United States')
#Converting the class of variables in the dataframe from character to numeric with mutate.
universityDf <- universityDf %>% mutate(`OverAll Score`=as.numeric(`OverAll Score`),
`Teaching Score`=as.numeric(`Teaching Score`),
`Research Score`=as.numeric(`Research Score`),
`Citations Score`=as.numeric(`Citations Score`),
`Industry Income Score`=as.numeric(`Industry Income Score`),
`International Outlook Score`=as.numeric(`International Outlook Score`), na.rm =TRUE)
universityDf
universityDf %>% summarise(min_number_of_students = min(.[[4]], na.rm = TRUE),
avg_number_of_students = mean(.[[4]], na.rm = TRUE),
max_number_of_students = max(.[[4]], na.rm = TRUE))
#Using subset to find the schools with the minimum and maximum number of students.
universityDf %>% subset(.[[4]] == 115 |
.[[4]] == 460632)
#Using the arrange function to find the universities with the most students.
universityDf %>% arrange(-.[[4]])
#Using count to find the number of universities in each country.
universityDf %>% count(Location)
#Using the count + arrange combo to find the locations with the highest number of universities.
universityDf %>% count(Location) %>%
arrange(-n)
#Filter + count + arrange combo: Comparing the number of top small universities (less than 5,000 students)
#between the U.S. and U.K.
universityDf %>% filter(.[[4]]< 5000 & (Location == 'United States'|Location =='United Kingdom')) %>%
count(Location) %>%
arrange(-n)
#group_by + summarise
universityDf %>%
group_by(Location) %>%
summarise(mean_ovr_score = mean(`OverAll Score`,na.rm=TRUE))
#Using the filter + group_by + summarise combo to compare the average overall score between the U.S. and the U.K.
universityDf %>%
filter(Location == 'United States'|Location == 'United Kingdom') %>%
group_by(Location) %>%
summarise(mean_ovr_score = mean(`OverAll Score`,na.rm=TRUE))
#Using the filter + group_by + summarise + arrange combo to find the countries with the highest mean over all score
# among the world's best universities.
universityDf %>%
filter(.[[4]] >= 5000 & .[[4]] <= 15000) %>%
group_by(Location) %>%
summarise(mean_ovr_score = mean(`OverAll Score`,na.rm=TRUE)) %>%
arrange(-mean_ovr_score, na.rm = TRUE)
install.packages('tidyr')
install.packages('tidyverse')
install.packages("tidyverse")
knitr::opts_chunk$set(message = FALSE)
install.packages('tidyr')
install.packages('tidyverse')
