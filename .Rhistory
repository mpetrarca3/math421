library(dplyr)
df <- read_csv('adult_census.csv')
df <- df %>%
rename(target = income)
head(df)
#Removing all missing values in any form.
df <- df %>% mutate_all(~replace(., . == 'Not Known', NA)) %>%
mutate_all(~replace(., . == '?', NA)) %>%
mutate_all(~replace(., . == 'Unknown', NA)) %>%
drop_na()
colSums(is.na(df))
#Workclass, education, marital.status, occupation, relationship, race, sex, native country, target, are all the categorical variables in the dataset. They must be converted to the class 'factor'.
df <- df %>%
mutate(target = as.factor(target),
workclass = as.factor(workclass),
education = as.factor(education),
marital.status = as.factor(marital.status),
occupation = as.factor(occupation),
relationship = as.factor(relationship),
race = as.factor(race),
sex = as.factor(sex),
native.country = as.factor(native.country)
)
library(caret)
install.packages("caretEnsemble")
library(caret)
install.packages("caret)
install.packages("caret")
install.packages("caret")
install.packages("caret")
library(caret)
library(caret)
install.packages("caret")
library(devtools)
library(caret)
install.packages('devtools')
library(devtools)
devtools::install_url("https://cran.r-project.org/src/contrib/caret_6.0-78.tar.gz")
library(caret)
library(caret)
update_packages("caret")
install.packages("tibble")
install.packages("caret")
knitr::opts_chunk$set(message = FALSE)
#Importing libraries and data, the first 80% of the rows were partitioned into the training dataset, while the remaining 20% of the rows were partitioned into the test dataset.
library(tidyverse)
library(dplyr)
df <- read_csv('adult_census.csv')
df <- df %>%
rename(target = income)
head(df)
#Removing all missing values in any form.
df <- df %>% mutate_all(~replace(., . == 'Not Known', NA)) %>%
mutate_all(~replace(., . == '?', NA)) %>%
mutate_all(~replace(., . == 'Unknown', NA)) %>%
drop_na()
colSums(is.na(df))
#Workclass, education, marital.status, occupation, relationship, race, sex, native country, target, are all the categorical variables in the dataset. They must be converted to the class 'factor'.
df <- df %>%
mutate(target = as.factor(target),
workclass = as.factor(workclass),
education = as.factor(education),
marital.status = as.factor(marital.status),
occupation = as.factor(occupation),
relationship = as.factor(relationship),
race = as.factor(race),
sex = as.factor(sex),
native.country = as.factor(native.country)
)
library(caret)
install.packages("tibble")
knitr::opts_chunk$set(message = FALSE)
#Importing libraries and data, the first 80% of the rows were partitioned into the training dataset, while the remaining 20% of the rows were partitioned into the test dataset.
library(tidyverse)
library(dplyr)
df <- read_csv('adult_census.csv')
df <- df %>%
rename(target = income)
head(df)
#Removing all missing values in any form.
df <- df %>% mutate_all(~replace(., . == 'Not Known', NA)) %>%
mutate_all(~replace(., . == '?', NA)) %>%
mutate_all(~replace(., . == 'Unknown', NA)) %>%
drop_na()
colSums(is.na(df))
#Workclass, education, marital.status, occupation, relationship, race, sex, native country, target, are all the categorical variables in the dataset. They must be converted to the class 'factor'.
df <- df %>%
mutate(target = as.factor(target),
workclass = as.factor(workclass),
education = as.factor(education),
marital.status = as.factor(marital.status),
occupation = as.factor(occupation),
relationship = as.factor(relationship),
race = as.factor(race),
sex = as.factor(sex),
native.country = as.factor(native.country)
)
library(caret)
knitr::opts_chunk$set(message = FALSE)
library(caret)
install.packages(c("curl", "dbplyr", "DEoptimR", "evaluate", "fansi", "htmltools", "lubridate", "markdown", "Matrix", "openssl", "pkgload", "prettyunits", "ragg", "Rcpp", "rmarkdown", "sp", "systemfonts", "testthat", "textshaping", "tibble", "tinytex", "tzdb", "vroom", "withr"))
install.packages(c("curl", "dbplyr", "DEoptimR", "evaluate", "fansi", "htmltools", "lubridate", "markdown", "Matrix", "openssl", "pkgload", "prettyunits", "ragg", "Rcpp", "rmarkdown", "sp", "systemfonts", "testthat", "textshaping", "tibble", "tinytex", "tzdb", "vroom", "withr"))
install.packages(c("curl", "dbplyr", "DEoptimR", "evaluate", "fansi", "htmltools", "lubridate", "markdown", "Matrix", "openssl", "pkgload", "prettyunits", "ragg", "Rcpp", "rmarkdown", "sp", "systemfonts", "testthat", "textshaping", "tibble", "tinytex", "tzdb", "vroom", "withr"))
install.packages(c("curl", "dbplyr", "DEoptimR", "evaluate", "fansi", "htmltools", "lubridate", "markdown", "Matrix", "openssl", "pkgload", "prettyunits", "ragg", "Rcpp", "rmarkdown", "sp", "systemfonts", "testthat", "textshaping", "tibble", "tinytex", "tzdb", "vroom", "withr"))
install.packages(c("curl", "dbplyr", "DEoptimR", "evaluate", "fansi", "htmltools", "lubridate", "markdown", "Matrix", "openssl", "pkgload", "prettyunits", "ragg", "Rcpp", "rmarkdown", "sp", "systemfonts", "testthat", "textshaping", "tibble", "tinytex", "tzdb", "vroom", "withr"))
install.packages(c("curl", "dbplyr", "DEoptimR", "evaluate", "fansi", "htmltools", "lubridate", "markdown", "Matrix", "openssl", "pkgload", "prettyunits", "ragg", "Rcpp", "rmarkdown", "sp", "systemfonts", "testthat", "textshaping", "tibble", "tinytex", "tzdb", "vroom", "withr"))
install.packages(c("curl", "dbplyr", "DEoptimR", "evaluate", "fansi", "htmltools", "lubridate", "markdown", "Matrix", "openssl", "pkgload", "prettyunits", "ragg", "Rcpp", "rmarkdown", "sp", "systemfonts", "testthat", "textshaping", "tibble", "tinytex", "tzdb", "vroom", "withr"))
install.packages(c("curl", "dbplyr", "DEoptimR", "evaluate", "fansi", "htmltools", "lubridate", "markdown", "Matrix", "openssl", "pkgload", "prettyunits", "ragg", "Rcpp", "rmarkdown", "sp", "systemfonts", "testthat", "textshaping", "tibble", "tinytex", "tzdb", "vroom", "withr"))
install.packages(c("curl", "dbplyr", "DEoptimR", "evaluate", "fansi", "htmltools", "lubridate", "markdown", "Matrix", "openssl", "pkgload", "prettyunits", "ragg", "Rcpp", "rmarkdown", "sp", "systemfonts", "testthat", "textshaping", "tibble", "tinytex", "tzdb", "vroom", "withr"))
install.packages(c("curl", "dbplyr", "DEoptimR", "evaluate", "fansi", "htmltools", "lubridate", "markdown", "Matrix", "openssl", "pkgload", "prettyunits", "ragg", "Rcpp", "rmarkdown", "sp", "systemfonts", "testthat", "textshaping", "tibble", "tinytex", "tzdb", "vroom", "withr"))
install.packages("tibble")
knitr::opts_chunk$set(message = FALSE)
library(caret)
knitr::opts_chunk$set(message = FALSE)
#Importing libraries and data, the first 80% of the rows were partitioned into the training dataset, while the remaining 20% of the rows were partitioned into the test dataset.
library(tidyverse)
library(dplyr)
df <- read_csv('adult_census.csv')
df <- df %>%
rename(target = income)
head(df)
#Removing all missing values in any form.
df <- df %>% mutate_all(~replace(., . == 'Not Known', NA)) %>%
mutate_all(~replace(., . == '?', NA)) %>%
mutate_all(~replace(., . == 'Unknown', NA)) %>%
drop_na()
colSums(is.na(df))
#Workclass, education, marital.status, occupation, relationship, race, sex, native country, target, are all the categorical variables in the dataset. They must be converted to the class 'factor'.
df <- df %>%
mutate(target = as.factor(target),
workclass = as.factor(workclass),
education = as.factor(education),
marital.status = as.factor(marital.status),
occupation = as.factor(occupation),
relationship = as.factor(relationship),
race = as.factor(race),
sex = as.factor(sex),
native.country = as.factor(native.country)
)
library(caret)
library(devtools)
devtools::install_url("https://cran.r-project.org/src/contrib/caret_6.0-78.tar.gz")
devtools::install_url("https://cran.r-project.org/src/contrib/caret_6.0-78.tar.gz")
library(devtools)
devtools::install_url("https://cran.r-project.org/src/contrib/caret_6.0-78.tar.gz")
library(devtools)
devtools::install_url("https://cran.r-project.org/src/contrib/caret_6.0-78.tar.gz")
library(devtools)
devtools::install_url("https://cran.r-project.org/src/contrib/caret_6.0-78.tar.gz")
update_packages("tibble")
knitr::opts_chunk$set(message = FALSE)
#Importing libraries and data, the first 80% of the rows were partitioned into the training dataset, while the remaining 20% of the rows were partitioned into the test dataset.
library(tidyverse)
library(dplyr)
df <- read_csv('adult_census.csv')
df <- df %>%
rename(target = income)
head(df)
#Removing all missing values in any form.
df <- df %>% mutate_all(~replace(., . == 'Not Known', NA)) %>%
mutate_all(~replace(., . == '?', NA)) %>%
mutate_all(~replace(., . == 'Unknown', NA)) %>%
drop_na()
colSums(is.na(df))
#Workclass, education, marital.status, occupation, relationship, race, sex, native country, target, are all the categorical variables in the dataset. They must be converted to the class 'factor'.
df <- df %>%
mutate(target = as.factor(target),
workclass = as.factor(workclass),
education = as.factor(education),
marital.status = as.factor(marital.status),
occupation = as.factor(occupation),
relationship = as.factor(relationship),
race = as.factor(race),
sex = as.factor(sex),
native.country = as.factor(native.country)
)
library(caret)
set.seed(2020)
partition <- createDataPartition(df$target, p = .80,
list = FALSE)
trainDf <- df[ partition,]
testDf <- df[-partition,]
library(rpart)
library(rattle)
depth = rpart.control(maxdepth=3)
tree <- rpart(target ~ hours.per.week, data = trainDf, method = "class",
control = depth)
tree
fancyRpartPlot(tree)
library(rpart)
library(rattle)
tree <- rpart(target ~ ., data = df_train,
control = rpart.control(maxdepth = 3))
library(rpart)
library(rattle)
tree <- rpart(target ~ ., data = trainDf,
control = rpart.control(maxdepth = 3))
tree
fancyRpartPlot(tree)
tree$variable.importance
barplot(tree$variable.importance)
fancyRpartPlot(tree)
knitr::opts_chunk$set(message = FALSE)
#Importing libraries and data, the first 80% of the rows were partitioned into the training dataset, while the remaining 20% of the rows were partitioned into the test dataset.
library(tidyverse)
library(dplyr)
df <- read_csv('adult_census.csv')
df <- df %>%
rename(target = income)
head(df)
#Removing all missing values in any form.
df <- df %>% mutate_all(~replace(., . == 'Not Known', NA)) %>%
mutate_all(~replace(., . == '?', NA)) %>%
mutate_all(~replace(., . == 'Unknown', NA)) %>%
drop_na()
colSums(is.na(df))
#Workclass, education, marital.status, occupation, relationship, race, sex, native country, target, are all the categorical variables in the dataset. They must be converted to the class 'factor'.
df <- df %>%
mutate(target = as.factor(target),
workclass = as.factor(workclass),
education = as.factor(education),
marital.status = as.factor(marital.status),
occupation = as.factor(occupation),
relationship = as.factor(relationship),
race = as.factor(race),
sex = as.factor(sex),
native.country = as.factor(native.country)
)
library(caret)
set.seed(2020)
partition <- createDataPartition(df$target, p = .80,
list = FALSE)
trainDf <- df[ partition,]
testDf <- df[-partition,]
library(rpart)
library(rattle)
tree <- rpart(target ~ ., data = trainDf,
control = rpart.control(maxdepth = 3))
tree
fancyRpartPlot(tree)
tree$variable.importance
#predict on testing data
prediction <- predict(tree, testDf, type = "class")
#Evaluate the predictions
cm <- confusionMatrix(data = prediction,
reference = testDf$target, positive = ">50K")
cm$overall[1]
#predict on testing data
prediction <- predict(tree, testDf, type = "class")
#Evaluate the predictions
cm <- confusionMatrix(data = prediction,
reference = testDf$target, positive = ">50K")
cm$overall[">50K"]
#predict on testing data
prediction <- predict(tree, testDf, type = "class")
#Evaluate the predictions
cm <- confusionMatrix(data = prediction,
reference = testDf$target, positive = ">50K")
cm$overall[1]
df
#predict on testing data
prediction <- predict(tree, testDf, type = "class")
#Evaluate the predictions
cm <- confusionMatrix(data = prediction,
reference = testDf$target, positive = ">50K")
cm$overall[1]
#predict on testing data
prediction <- predict(tree, testDf, type = "class")
#Evaluate the predictions
cm <- confusionMatrix(data = prediction,
reference = testDf$target, positive == ">50K")
#predict on testing data
prediction <- predict(tree, testDf, type = "class")
#Evaluate the predictions
cm <- confusionMatrix(data = prediction,
reference = testDf$target, positive = ">50K")
cm$overall[1]
#predict on testing data
prediction <- predict(tree, testDf, type = "class")
#Evaluate the predictions
cm <- confusionMatrix(data = prediction,
reference = testDf$target, positive = ">5K")
#predict on testing data
prediction <- predict(tree, testDf, type = "class")
#Evaluate the predictions
cm <- confusionMatrix(data = prediction,
reference = testDf$target, positive = ">50K")
cm$overall[1]
cm
library(caret)
set.seed(2023)
partition <- createDataPartition(df$target, p = .80,
list = FALSE)
trainDf <- df[ partition,]
testDf <- df[-partition,]
library(rpart)
library(rattle)
tree <- rpart(target ~ ., data = trainDf,
control = rpart.control(maxdepth = 3))
tree
#predict on testing data
prediction <- predict(tree, testDf, type = "class")
#Evaluate the predictions
cm <- confusionMatrix(data = prediction,
reference = testDf$target, positive = ">50K")
cm$overall[1]
cm
set.seed(2550)
splitIndex1 <- createDataPartition(df$target, p = .80,
list = FALSE)
trainDf1 <- df[ splitIndex1,]
testDf1 <- df[-splitIndex1,]
tree1 <- rpart(target ~ ., data = trainDf1,
control = rpart.control(maxdepth = 3))
tree1
set.seed(4880)
splitIndex2 <- createDataPartition(df$target, p = .80,
list = FALSE)
trainDf2 <- df[ splitIndex2,]
testDf2 <- df[-splitIndex2,]
tree2 <- rpart(target ~ ., data = trainDf2,
control = rpart.control(maxdepth = 3))
tree2
set.seed(1440)
splitIndex3 <- createDataPartition(df$target, p = .80,
list = FALSE)
trainDf3 <- df[ splitIndex3,]
testDf3 <- df[-splitIndex3,]
tree3 <- rpart(target ~ ., data = trainDf3,
control = rpart.control(maxdepth = 3))
tree3
set.seed(2550)
splitIndex1 <- createDataPartition(df$target, p = .80,
list = FALSE)
trainDf1 <- df[ splitIndex1,]
testDf1 <- df[-splitIndex1,]
tree1 <- rpart(target ~ ., data = trainDf1,
control = rpart.control(maxdepth = 3))
prediction <- predict(tree1, testDf1, type = "class")
cm1 <- confusionMatrix(data = prediction,
reference = testDf1$target, positive = ">50K")
cm1$overall[1]
set.seed(4880)
splitIndex2 <- createDataPartition(df$target, p = .80,
list = FALSE)
trainDf2 <- df[ splitIndex2,]
testDf2 <- df[-splitIndex2,]
tree2 <- rpart(target ~ ., data = trainDf2,
control = rpart.control(maxdepth = 3))
prediction <- predict(tree2, testDf2, type = "class")
cm2 <- confusionMatrix(data = prediction,
reference = testDf2$target, positive = ">50K")
cm2$overall[1]
set.seed(1440)
splitIndex3 <- createDataPartition(df$target, p = .80,
list = FALSE)
trainDf3 <- df[ splitIndex3,]
testDf3 <- df[-splitIndex3,]
tree3 <- rpart(target ~ ., data = trainDf3,
control = rpart.control(maxdepth = 3))
prediction <- predict(tree3, testDf3, type = "class")
cm3 <- confusionMatrix(data = prediction,
reference = testDf3$target, positive = ">50K")
cm3$overall[1]
library(randomForest)
library(randomForest)
forest = randomForest(target ~ ., data=trainDf, ntree = 1000)
prediction <- predict(forest, testDf, type = "class")
cm <- confusionMatrix(data = prediction,
reference = testDf$target,
positive = ">50K")
cm$overall[1]
forest
library(randomForest)
forest = randomForest(target ~ ., data=trainDf, ntree = 1000)
forest
prediction <- predict(forest, testDf, type = "class")
cm <- confusionMatrix(data = prediction,
reference = testDf$target,
positive = ">50K")
cm$overall[1]
barplot(forest$variable.importance)
barplot(forest$variable.importance)
library(randomForest)
forest <- randomForest(target ~ ., data=trainDf, ntree = 1000)
forest
prediction <- predict(forest, testDf, type = "class")
cm <- confusionMatrix(data = prediction,
reference = testDf$target,
positive = ">50K")
cm$overall[1]
barplot(forest$variable.importance)
forest
head(forest)
head(forest$variable.importance)
forest$variable.importance
forest$variable.importance
importance(forest)
p1 <- importance(forest)
barplot(p1)
barplot(importance(forest))
forest %>%
importance() %>%
barplot()
forest %>%
importance() %>%
barplot(x = names())
forest %>%
importance()
forest %>%
importance() %>%
names()
forest %>%
importance() %>%
```
forest %>%
importance()
names(p1)
p1 <- forest %>% importance()
names(p1)
p1 <- forest %>% importance()
ggplot()+
barplot(p1)
p1 <- forest %>% importance()
ggplot()+
geom_bar(p1)
forest %>% importance() %>%
ggplot()+
geom_bar()
hist(importance(forest))
barplot(importance(forest))
importance(forest)
hist(importance(forest))
forest %>%
importance()
forest %>%
importance() %>%
ggplot()+
geom_bar(aes(x=[1]))
forest %>%
importance() %>%
ggplot()+
geom_bar(aes(x=[.1]))
forest %>%
importance() %>%
ggplot()+
geom_bar(aes(x=[.1,]))
forest %>%
importance() %>%
ggplot()+
geom_bar()
forest %>%
importance() %>%
ggplot()+
geom_bar(forest)
forest %>%
importance() %>%
ggplot()+
geom_bar(forest$importance)
ggplot()+geom_bar(forest$importance)
barplot(forest$importance)
forest$importance
barplot(forest$importance)
barplot(y=forest$importance)
barplot(forest$importance)
names(forest$importance)
forest$importance
table(forest$importance)
point(forest$importance)
ggplot()+
geom_point(forest$importance)
importance(forest)
bar(importance(forest))
line(importance(forest))
lines(importance(forest))
lines(y = importance(forest))
linearizeMlist(importance(forest))
lines.default(importance(forest))
plot(importance(forest))
varImpPlot(forest)
```{r}
varImpPlot(forest)
varImpPlot(,forest)
varImpPlot(x,forest)
varImpPlot(forest,forest)
varImpPlot(forest)
importance(forest)
importance(forest)
forest1 <- randomForest(target ~ ., data=trainDf1, ntree = 1000)
forest1
forest2 <- randomForest(target ~ ., data=trainDf2, ntree = 1000)
forest2
forest3 <- randomForest(target ~ ., data=trainDf3, ntree = 1000)
forest3
forest1 <- randomForest(target ~ ., data=trainDf1, ntree = 1000)
prediction <- predict(forest, testDf1, type = "class")
cm1 <- confusionMatrix(data = prediction,
reference = testDf1$target,
positive = ">50K")
cm1$overall[1]
forest2 <- randomForest(target ~ ., data=trainDf2, ntree = 1000)
prediction <- predict(forest, testDf2, type = "class")
cm2 <- confusionMatrix(data = prediction,
reference = testDf2$target,
positive = ">50K")
cm2$overall[1]
forest3 <- randomForest(target ~ ., data=trainDf3, ntree = 1000)
prediction <- predict(forest, testDf3, type = "class")
cm3 <- confusionMatrix(data = prediction,
reference = testDf3$target,
positive = ">50K")
cm3$overall[1]
